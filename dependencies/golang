#!/bin/sh
#Check golang
ARCH=$(uname -m)
if [ -d $WORKDIRECTORY/src/go ] && [ -z $GOROOT ]; then
PATH=$WORKDIRECTORY/src/go/bin:$PATH
GOROOT=$WORKDIRECTORY/src/go
GOPATH=$WORKDIRECTORY/src/go1.x
GOLANG_WORK=yes
else
if [ -z $GOROOT ];then
if [ "$ARCH" = "x86_64" ]; then
GOURL=`curl -so- https://golang.org/dl/ | grep -oP 'https:\/\/dl\.google\.com\/go\/go([0-9\.]+)\.linux-amd64\.tar\.gz' | head -n 1`
fi
if [ "$ARCH" = "i386" ]; then
GOURL=`curl -so- https://golang.org/dl/ | grep -oP 'https:\/\/dl\.google\.com\/go\/go([0-9\.]+)\.linux-386\.tar\.gz' | head -n 1`
fi
if [ "$ARCH" = "armv6l" ]; then
GOURL=`curl -so- https://golang.org/dl/ | grep -oP 'https:\/\/dl\.google\.com\/go\/go([0-9\.]+)\.linux-armv6l\.tar\.gz' | head -n 1`
fi
if [ "$ARCH" = "armv7l" ]; then
GOURL=`curl -so- https://golang.org/dl/ | grep -oP 'https:\/\/dl\.google\.com\/go\/go([0-9\.]+)\.linux-armv6l\.tar\.gz' | head -n 1`
fi
if [ "$ARCH" = "" ]; then
GOLANG_WORK=no
if [ "$LANG" = "zh_CN.UTF-8" ]; then
  echo "由于golang不支持您的架构,您将无法使用插件"
else
  echo "Since golang doesn't support your architecture,you won't be able to use plugins"
fi
fi
echo "Downloading golang"
curl -so $WORKDIRECTORY/src/go.tar.gz $GOURL
if [ -f $WORKDIRECTORY/src/go.tar.gz ]; then
tar -xzf $WORKDIRECTORY/src/go.tar.gz
rm -rf $WORKDIRECTORY/src/go.tar.gz
PATH=$WORKDIRECTORY/src/go/bin:$PATH
GOROOT=$WORKDIRECTORY/src/go
GOPATH=$WORKDIRECTORY/src/go1.x
GOLANG_WORK=yes
else
GOLANG_WORK=no
if [ "$LANG" = "zh_CN.UTF-8" ]; then
  echo "无法下载golang,请检查您的网络"
else
  echo "Unable to download golang, please check your network"
fi
fi
else
GOLANG_WORK=yes
fi
fi
