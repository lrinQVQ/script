#!/bin/sh
# Get the dependencies script absolute path
export DEP=$PWD/dependencies

# Get user id
USERID=$(id -u)

# Assign work directory
export WORKDIRECTORY=$PWD/shadowsocks

# Get default shell
export DEFAULTSHELL=$(readlink -f /bin/sh | awk -F '/' '{print $NF}')

if [ "$LANG" = "zh_CN.UTF-8" ]; then
  . locales/zh_CN.sh
else
  . locales/en.sh
fi

# Share function
encrytedpasswd() {
  export PASSWD=$(echo "$PASSWD" | base64 -i)
}

unencrytedpasswd() {
  export PASSWD=$(echo "$PASSWD" | base64 -d)
}

sysctl_config() {
  if [ -f "/etc/sysctl.conf" ]; then
    FILE="/etc/sysctl.conf"
  else
    FILE="/etc/sysctl.d/99-tcp.conf"
  fi
}

ss_config() {
  cd $WORKDIRECTORY && . bin/ss_config
}

# Passcode subshell
(
  PASSCODE=$(git rev-parse --verify -q HEAD)
    if [ "$?" = 0 ]; then
      noobtest() {
        echo "如需切换中文，请将 LANG 环境变量设置为 zh_CN.UTF-8。"
        echo
        echo "$MSG_NOOBTEST_TIPS"
        read -p "$MSG_NOOBTEST_CODE" I_AM_NOT_A_NOOB

        if [ "$I_AM_NOT_A_NOOB" != "$PASSCODE" ]; then
          noobtest
        fi
      }

      noobtest

   fi
)

# Menu subshell
(
  if [ -f $WORKDIRECTORY/finish ]; then
    choose() {

      echo "$MSG_CHOOSE_UNINSTAL"
      echo "$MSG_CHOOSE_CONFIG"
      echo "$MSG_CHOOSE_MANAGE"
      read -p "$MSG_CHOOSE_NUM" CHOOSE_NUM

      if [ "$CHOOSE_NUM" -ne 1 ] && [ "$CHOOSE_NUM" -ne 2 ] && [ "$CHOOSE_NUM" -ne 3 ]; then
        choose
      fi
    }

    choose

  else

    choose() {
        echo "$MSG_CHOOSE_INSTALL"
        echo "$MSG_CHOOSE_EXIT"
        read -p "$MSG_CHOOSE_NUM" CHOOSE_NUM

      if [ "$CHOOSE_NUM" -ne 1 ] && [ "$CHOOSE_NUM" -ne 2 ]; then
        choose
      fi
    }

    choose

  fi
)

if [ ! -d $WORKDIRECTORY ]; then
  echo "$MSG_WORKDIRECTORY"
  mkdir -v $WORKDIRECTORY
  mkdir -v $WORKDIRECTORY/src
  touch $WORKDIRECTORY/envsetup.sh
fi

# Check env subshell
(
  NEWDEFAULTSHELL=$DEFAULTSHELL
  NEWWORKDIRECTORY=$WORKDIRECTORY
  check_env() {
    . $NEWWORKDIRECTORY/envsetup.sh
    if [ -n $WORKDIRECTORY ]; then
      echo "export WORKDIRECTORY=$NEWWORKDIRECTORY" >>$NEWWORKDIRECTORY/envsetup.sh
    elif [ "$WORKDIRECTORY" != "$NEWWORKDIRECTORY" ]; then
      sed -i '/WORKDIRECTORY/d' $NEWWORKDIRECTORY/envsetup.sh
      check_env
    fi
    if [ -n $DEFAULTSHELL ]; then
      echo "export DEFAULTSHELL=$DEFAULTSHELL" >>$NEWWORKDIRECTORY/envsetup.sh
    elif [ "$DEFAULTSHELL" != "$NEWDEFAULTSHELL" ]; then
      sed -i '/DEFAULTSHELL/d' $NEWWORKDIRECTORY/envsetup.sh
      check_env
    fi
  }
  check_env
)

# Check ROOT Permissions
if [ "$USERID" != 0 ] && [ -f /etc/sudoers ]; then
  unset SUDO
  export SUDO=yes
  user_password() {
    if [ "$DEFAULTSHELL" = "dash" ]; then
      read -p "$MSG_USERPASS" PASSWD
    else
      read -s -p "$MSG_USERPASS" PASSWD
    fi

    echo $PASSWD | sudo -S touch root_check
    if [ "$?" != 0 ]; then
      echo "$MSG_WRONGPASS"
      user_password
    else
      echo $PASSWD | sudo -S rm -f root_check
    fi
  }

  user_password

  (
  . $WORKDIRECTORY/envsetup.sh
  if [ -n $SAVEPASSWORD ]; then
    sed -i '/SAVEPASSWORD/d' $WORKDIRECTORY/envsetup.sh
  fi
  if [ -n $PASSWD ]; then
    sed -i '/PASSWD/d' $WORKDIRECTORY/envsetup.sh
  fi
  )
  read -p "$MSG_SAVEPASS" SAVEPASSWORD
    if [ "$SAVEPASSWORD" = "yes" ] || [ "$SAVEPASSWORD" = "" ]; then
      export AUTOUPDATE_CHECK=yes
    elif [ "$SAVEPASSWORD" = "no" ]; then
      export AUTOUPDATE_CHECK=no
    fi
    echo "export SAVEPASSWORD=$SAVEPASSWORD" >>$WORKDIRECTORY/envsetup.sh
    if [ "$SAVEPASSWORD" = "yes" ] || [ "$SAVEPASSWORD" = "" ]; then
      ENCRYTEDPASSWD=encrytedpasswd
      UNENCRYTEDPASSWD=unencrytedpasswd
      $ENCRYTEDPASSWD
      echo "export PASSWD=$PASSWD" >>$WORKDIRECTORY/envsetup.sh
      echo "export ENCRYTEDPASSWD=encrytedpasswd" >>$WORKDIRECTORY/envsetup.sh
      echo "export UNENCRYTEDPASSWD=unencrytedpasswd" >>$WORKDIRECTORY/envsetup.sh
    fi
else
  if [ "$USERID" = 0 ]; then
    unset SUDO
    export SUDO=no
  else
    echo "$MSG_NOROOT"
    exit 1
  fi
fi
echo "export SUDO=$SUDO" >>$WORKDIRECTORY/envsetup.sh

# Check memsize
MEM_CHECK=$(cat /proc/meminfo | grep MemTotal | grep '[0-9]' -o | awk BEGIN{RS=EOF}'{gsub(/\n/,"");print}')
# Preclude out of memory
if [ "$MEM_CHECK" -ge "524288" ]; then
  export CPU_NUM=$(cat /proc/cpuinfo | grep processor | wc -l)
else
  export CPU_NUM=1
fi
echo "export CPU_NUM=$CPU_NUM" >>$WORKDIRECTORY/envsetup.sh
chmod +x $WORKDIRECTORY/envsetup.sh

# Check linux distribution
#Debian Base
if [ -f /etc/debian_version ]; then
  DEBIAN_VERSION=$(cat /etc/debian_version | cut -d '.' -f 1)
  if [ "$DEBIAN_VERSION" = "" ]; then
    DEBIAN_VERSION=$(cat /etc/debian_version)
  fi
  case "$DEBIAN_VERSION" in
    7 )
      #. $DEP/debian-7
      ;;
    8 | jessie/sid)
      #. $DEP/debian-8
      ;;
    9 | stretch/sid)
      . $DEP/debian-9
      ;;
    10 | buster/sid)
      . $DEP/debian-10
      ;;
    11 | bullseye/sid)
      . $DEP/debian-11
      ;;
    12 | bookworm/sid)
      . $DEP/debian-12
      ;;
    13 | trixie/sid)
      . $DEP/debian-13
      ;;
    14 | forky/sid)
      . $DEP/debian-sid
      ;;
    *)
      echo "$MSG_DEBIAN"
      exit 1
      ;;
  esac

fi

#Redhat Base
if [ -f /etc/redhat-release ]; then
  REDHAT_VERSION=$(cat /etc/redhat-release | grep -oE "[0-9.]+")
elif [ -f /etc/system-release ]; then
  REDHAT_VERSION=$(cat /etc/system-release | grep -oE "[0-9.]+")

  case "$REDHAT_VERSION" in
    7.0.1406 | 7.1.1503 | 7.2.1511 | 7.3.1611 | 7.4.1708 | 7.5.1804 | 2)
      . $DEP/redhat7
      ;;
    6.0 | 6.1 | 6.2 | 6.3 | 6.4 | 6.5 | 6.6 | 6.7 | 6.8 | 6.9 | 2018.03)
      . $DEP/redhat6
      ;;
    *)
      echo "$MSG_REDHAT"
      exit 1
      ;;
  esac

fi

#AcgLinux

if [ "$OS" = "" ]; then
  echo "$MSG_OS"
  exit 1
fi

. $DEP/bbr
. $DEP/tcp_fastopen

#Autoupdate requirement check
if [ "$AUTOUPDATE_CHECK" = "yes" ] || [ "$AUTOUPDATE_CHECK" = "" ]; then
  read -p "$MSG_AUTOUPDATE" AUTOUPDATE_CHECK
  if [ "$AUTOUPDATE_CHECK" = "yes" ] || [ "$AUTOUPDATE_CHECK" = "" ]; then
    ln -vf $DEP/ss_update $WORKDIRECTORY/bin/ss_update
    ln -vf $DEP/libsodium_update $WORKDIRECTORY/bin/libsodium_update
    ln -vf $DEP/mbedtls_update $WORKDIRECTORY/bin/mbedtls_update
    ln -vf $DEP/c-ares_update $WORKDIRECTORY/bin/c-ares_update
    ln -vf $DEP/shadowsocks_update $WORKDIRECTORY/bin/shadowsocks_update
    ln -vf $DEP/kill-all $WORKDIRECTORY/bin/kill-all
    AUTOUPDATE_CRON="0 0 * * * cd $WORKDIRECTORY && sh bin/ss_update >/dev/null 2>&1"
    if ! crontab -l | grep -Fq -- "$AUTOUPDATE_CRON"; then
      (crontab -l | sed '/bin\/ss_update/d') | crontab -
      (crontab -l 2>/dev/null; echo "$AUTOUPDATE_CRON") | crontab -
    fi
  fi
fi

ln -vf $DEP/ss_config $WORKDIRECTORY/bin/ss_config
ss_config

read -p "$MSG_STARTUP" STARTUP_SERVER

if [ "$STARTUP_SERVER" = "yes" ] || [ "$STARTUP_SERVER" = "" ]; then
  ln -v $DEP/ss_startup $WORKDIRECTORY/bin
  STARTUP_CRON="@reboot cd $WORKDIRECTORY && sh bin/ss_startup >/dev/null 2>&1"
  if ! crontab -l | grep -Fq -- "$STARTUP_CRON"; then
    (crontab -l | sed '/bin\/ss_startup/d') | crontab -
    (crontab -l 2>/dev/null; echo "$STARTUP_CRON") | crontab -
  fi
fi

# daemon
read -p "$MSG_DAEMON" HA_CHECK

if [ "$HA_CHECK" = "yes" ] || [ "$HA_CHECK" = "" ]; then
  ln -v $DEP/daemon $WORKDIRECTORY/bin/daemon
  HA_CRON="*/1 * * * * cd $WORKDIRECTORY && sh bin/daemon >/dev/null 2>&1"
  if ! crontab -l | grep -Fq -- "$HA_CRON"; then
    (crontab -l | sed '/bin\/daemon/d') | crontab -
    (crontab -l 2>/dev/null; echo "$HA_CRON") | crontab -
  fi
fi

touch $WORKDIRECTORY/finish

exit 0
